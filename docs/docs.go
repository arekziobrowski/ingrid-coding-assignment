// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Arkadiusz Ziobrowski",
            "email": "arekziobrowski@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/routes": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieves routes from OSRM 3rd party service based on provided source and destination latitude and longitude",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-delimited latitude and longitude values of source location in decimal format",
                        "name": "src",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Comma-delimited latitude and longitude values of destination location in decimal format",
                        "name": "dst",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit of returned values",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Ordering of routes in the response (asc or desc) - default is asc (ascending)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/route.GetRoutesResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "route.GetRoutesResponse": {
            "type": "object",
            "properties": {
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/route.Route"
                    }
                },
                "source": {
                    "type": "string"
                }
            }
        },
        "route.Route": {
            "type": "object",
            "properties": {
                "destination": {
                    "type": "string"
                },
                "distance": {
                    "type": "number"
                },
                "duration": {
                    "type": "number"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Ingrid Backend Coding Task App",
	Description: "This is a sample REST API application built for Ingrid coding task.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
